services:
  gateway:
    build:
      context: gateway/.
      dockerfile: Dockerfile
    image: gateway
    container_name: gateway
    restart: always
    ports:
      - '${GATEWAY_PORT}:8080'
    environment:
      JWT_SECRET: ${JWT_SECRET}
      EUREKA_HOST: eureka
      EUREKA_PORT: 8761
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - eureka
      - users
      - rooms
      - auth
      - asks
      - bookings

  auth:
    build:
      context: auth-ms/.
      dockerfile: Dockerfile
    image: auth-ms
    container_name: auth
    restart: always
    ports:
      - '${AUTH_PORT}:8080'
    environment:
      EUREKA_HOST: eureka
      EUREKA_PORT: 8761
      XRAY_DAEMON_ADDRESS: xray-daemon:2000
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - eureka

  users:
    build:
      context: users-ms/.
      dockerfile: Dockerfile
    image: users-ms
    container_name: users
    restart: always
    ports:
      - '${USERS_PORT}:8080'
    environment:
      DB_HOST: users-db
      DB_PORT: 5432
      DB_NAME: ${USERS_DB_NAME}
      DB_USERNAME: ${USERS_DB_USERNAME}
      DB_PASSWORD: ${USERS_DB_PASSWORD}
      EUREKA_HOST: eureka
      EUREKA_PORT: 8761
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - users-db
      - eureka

  users-db:
    image: postgres:16.4
    container_name: users_db
    restart: always
    ports:
      - ${USERS_DB_PORT}:5432
    environment:
      POSTGRES_DB: ${USERS_DB_NAME}
      POSTGRES_USER: ${USERS_DB_USERNAME}
      POSTGRES_PASSWORD: ${USERS_DB_PASSWORD}
    volumes:
      - users:/var/lib/postgresql/data

  rooms:
    build:
      context: rooms-ms/.
      dockerfile: Dockerfile
    image: rooms-ms
    container_name: rooms
    restart: always
    ports:
      - '${ROOMS_PORT}:8080'
    environment:
      DB_HOST: rooms-db
      DB_PORT: 5432
      DB_NAME: ${ROOMS_DB_NAME}
      DB_USERNAME: ${ROOMS_DB_USERNAME}
      DB_PASSWORD: ${ROOMS_DB_PASSWORD}
      EUREKA_HOST: eureka
      EUREKA_PORT: 8761
      KAFKA_HOST: kafka
      KAFKA_PORT: 9094
      S3_BUCKET_NAME: ${ROOMS_S3_BUCKET_NAME}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - rooms-db
      - kafka
      - eureka

  rooms-db:
    image: postgres:16.4
    container_name: rooms_db
    restart: always
    ports:
      - ${ROOMS_DB_PORT}:5432
    environment:
      POSTGRES_DB: ${ROOMS_DB_NAME}
      POSTGRES_USER: ${ROOMS_DB_USERNAME}
      POSTGRES_PASSWORD: ${ROOMS_DB_PASSWORD}
    volumes:
      - rooms:/var/lib/postgresql/data

  asks:
    build:
      context: asks-ms/.
      dockerfile: Dockerfile
    image: asks-ms
    container_name: asks
    restart: always
    ports:
      - '${ASKS_PORT}:8080'
    environment:
      DB_HOST: asks-db
      DB_PORT: 3306
      DB_NAME: ${ASKS_DB_NAME}
      DB_USERNAME: ${ASKS_DB_USERNAME}
      DB_PASSWORD: ${ASKS_DB_PASSWORD}
      EUREKA_HOST: eureka
      EUREKA_PORT: 8761
      KAFKA_HOST: kafka
      KAFKA_PORT: 9094
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - asks-db
      - kafka
      - eureka

  asks-db:
    image: mysql:9.0.1
    container_name: asks_db
    restart: always
    ports:
      - ${ASKS_DB_PORT}:3306
    environment:
      MYSQL_DATABASE: ${ASKS_DB_NAME}
      MYSQL_ROOT_PASSWORD: ${ASKS_DB_PASSWORD}
    volumes:
      - asks:/var/lib/mysql

  bookings:
    build:
      context: bookings-ms/.
      dockerfile: Dockerfile
    image: bookings-ms
    container_name: bookings
    restart: always
    ports:
      - '${BOOKINGS_PORT}:8080'
    environment:
      DB_HOST: bookings-db
      DB_PORT: 3306
      DB_NAME: ${BOOKINGS_DB_NAME}
      DB_USERNAME: ${BOOKINGS_DB_USERNAME}
      DB_PASSWORD: ${BOOKINGS_DB_PASSWORD}
      EUREKA_HOST: eureka
      EUREKA_PORT: 8761
      KAFKA_HOST: kafka
      KAFKA_PORT: 9094
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - bookings-db
      - kafka
      - eureka

  bookings-db:
    image: postgres:16.4
    container_name: bookings_db
    restart: always
    ports:
      - ${BOOKINGS_DB_PORT}:5432
    environment:
      POSTGRES_DB: ${BOOKINGS_DB_NAME}
      POSTGRES_USER: ${BOOKINGS_DB_USERNAME}
      POSTGRES_PASSWORD: ${BOOKINGS_DB_PASSWORD}
    volumes:
      - bookings:/var/lib/postgresql/data

  receipts:
    build:
      context: receipts-ms/.
      dockerfile: Dockerfile
    image: receipts-ms
    container_name: receipts
    restart: always
    ports:
      - '${RECEIPTS_PORT}:8080'
    environment:
      USERS_MS_URL: users:8080
      ROOMS_MS_URL: rooms:8080
      KAFKA_HOST: kafka
      KAFKA_PORT: 9094
      S3_BUCKET_NAME: ${RECEIPTS_S3_BUCKET_NAME}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - bookings
      - kafka
      - eureka

  emails:
    build:
      context: emails-ms/.
      dockerfile: Dockerfile
    image: emails-ms
    container_name: emails
    restart: always
    ports:
      - '${EMAILS_PORT}:8080'
    environment:
      EMAIL_ACCOUNT: ${EMAIL_ACCOUNT}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      USERS_MS_URL: users:8080
      ROOMS_MS_URL: rooms:8080
      KAFKA_HOST: kafka
      KAFKA_PORT: 9094
    depends_on:
      - kafka
      - eureka

  eureka:
    build:
      context: eureka-ms/.
      dockerfile: Dockerfile
    image: eureka-ms
    container_name: eureka
    restart: always
    ports:
      - '${EUREKA_PORT}:8761'

  kafka:
    image: 'apache/kafka:3.8.0'
    container_name: kafka
    restart: always
    ports:
      - '${KAFKA_PORT}:9092'
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'EXTERNAL://localhost:${KAFKA_PORT},INTERNAL://kafka:9094'
      KAFKA_LISTENERS: 'EXTERNAL://0.0.0.0:${KAFKA_PORT},INTERNAL://0.0.0.0:9094,CONTROLLER://0.0.0.0:9093'
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    volumes:
      - kafka_logs:/var/lib/kafka/data
      - kafka_config:/mnt/shared/config
      - kafka_secrets:/etc/kafka/secrets


volumes:
  users:
  rooms:
  asks:
  bookings:
  kafka_logs:
  kafka_config:
  kafka_secrets: